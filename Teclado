`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    07:13:45 08/16/2015 
// Design Name: Granados - Valverde
// Module Name:    TopModule 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module Teclado(
input wire clk,  ///Clock de la Nexys y reset 

input wire ps2d, ps2c, rx_en,  ////ps2c es el clock del PS2, rx_en es usado para habilitar o no la operación de recepción de datos
//// ps2d 

//output reg verdad,  /// Esta variable funciona para decir que ya terminó de recibir el dato

//output reg [10:0] b_reg,
output reg led,
output reg [5:0] salida ///8 datos a a utilizar
                    ///provenientes del teclado

						  
) ;

// symbolic state declaration
localparam [2:0]    ////
	idle   = 3'd0,      ////Estados de la maquina   
	dps    = 3'd1,        //// 
	load   = 3'd2,
	final  = 3'd3,
	final2 = 3'd4;	////

//signal declaration

reg [2:0] state_reg = 3'd0;/// Variables para cambiar cada estado de la maquina 
reg [2:0] state_next = 3'd0;  
reg [5:0] salida_reg = 6'd0;
reg [5:0] salida_next = 6'd0;
reg verdad_reg = 1'd0;
reg verdad_next = 1'd0;

reg [7:0] filter_reg = 8'd0; ///En filter_reg y en filter_next
wire[7:0] filter_next;// se almacenan los 8 bits que se toman de muestra



reg f_ps2c_reg = 1'd0;   ///// Esta variable toma un valor de 1 o 0 dependiendo del lugar que se encuentre del clock del ps2,
////De forma que cuando hallan solo unos en la variable filter_reg quiere decir que el punto o el lugar del clk de la ps2 esta en el 1 del clock
///Así mismo cuando está en la parte que sólo hay ceros, el valor de la variable será cero

reg continuar = 1'd0;
reg verdad = 1'd0; 

wire f_ps2c_next;  


reg [3:0] n_reg = 4'd0, n_next = 4'd0;   ///lleva la cuenta de cuantos datos se han almacenado, deben ser nueve datos, por lo que por en cada ciclo n se le ira disminuyendo un 1



reg [10:0] b_reg = 11'd0, b_next = 11'd0;    //// Variables donde se almacenan los once datos que envia el teclado los cuales son el bit de paridad, los 8 bits de datos de cada ////////////////////////////tecla, el bit de inicio y el bit de parada    


wire fall_edge;   /// señal de flanco negativo 


////Detector de francos

always @(posedge clk)  //// ciclo que se lleva acabo cada vez que hay un ciclo reloj de la nexys o un reset
	begin
		filter_reg<= filter_next;   ///Aqui se actualizan los valores del recolector de datos del clock de la ps2
		f_ps2c_reg<= f_ps2c_next;   ///
	end
	
assign filter_next = {ps2c,filter_reg[7:1]};      ///////Aquí es donde se irán metiendo los datos de la variable recolectora de valores, esto se realizará en el bit más significativo de forma que se hará un corrimeinto hacia la derecha  
assign f_ps2c_next = (filter_reg==8'b11111111) ? 1'b1:   ////////Aquí es donde se asignará el valor de 1 o 0 a la variable f_ps2c_next
					 (filter_reg==8'b00000000) ? 1'b0:   ////De forma que se pueda saber en qué lugar está la variable tomando los datos
					 f_ps2c_reg;    //////Aquí la variable tomará el valor anterior, esto pasa cuando la variable que recolecta los valores se encuentra en ///////////por ejemplo en 00001111 

 assign fall_edge = f_ps2c_reg & ~f_ps2c_next; ////Aquí es donde se activa la bandera que indica que hay un flanco negativo, esto se logra mediante un AND


                  /////////////////////////////////////////// =>Aquí f_ps2c_next=1   
//                /                      		       		   / 
//                /     				             			   /  
//                /     				             			   / 
//                /               			 	 				   / 
//                /                					  			 	/  
//////////////////                 					  			 	//////////////////  =>Aquí f_ps2c_next=0  


         /////00001111\\\\\											 /////11110000\\\\\

//    \\\En este intervalo////										 \\\En este intervalo////
//    \\\El valor de f_ps2c_next///                                     \\\El valor de f_ps2c_next/// 
//    \\\es igual a            ///                                     \\\es igual a            ///
//    \\\f_ps2c_reg, es decir  ///									 \\\f_ps2c_reg, es decir  ///
//    \\\el valor anterior 0   ///									 \\\el valor anterior 1   ///	



/////////Parte secuencial de la máquina de estado (FSM) y datos de los registros


always @(posedge clk)    /////Aquí se inicializan los estados y se actualizan las variables
		begin
			state_reg <= state_next;
			n_reg <= n_next;
			b_reg <= b_next;
			verdad_reg <= verdad_next;
		end
				
/////Parte combinacional
always @*
begin 
	state_next = state_reg;
	verdad_next = verdad_reg;	///Se actualiza la variable de estado
	//rx_done_tick = 1'd0;    ///Se inicializa la variable
	n_next = n_reg;    /// Se actualiza la variable que lleva la cuenta de las variables que son empaquetadas
	b_next = b_reg;    /// Aqui se almacenan los datos que son enviados del teclado
   verdad = 1'd0;

	case(state_reg)

		idle:
			if (fall_edge & rx_en)
				begin
				// shift in start bit

				b_next = {ps2d, b_reg[10:1]}; ///Se mete el bit de inicio en el paqute de datos

				n_next = 4'd9;     /// Se pone la variable en nueve para luego ser decrementada para que se pueda llevar el control de los datos que son ///////////////////////// empaquetados 

				state_next = dps;  ///Se pasa al estado dps

				end

		dps:  //8 data + 1 parity + 1 stop


			if (fall_edge)

				begin
					b_next= {ps2d, b_reg[10:1]};   ///Se empaquete el bit de paridad y los 8 datos que se desean tomar del teclado y el bit de parada
					
					if (n_reg==0)
					
						state_next = load;

					else
						n_next = n_reg - 1'd1;

				end

		load: // extra clock to complete the last shift

				if (b_reg[8:1] == 8'hF0)
					begin
						verdad_next = 1'd1;
						state_next = idle;
					end
				else     
					state_next = final;

		final:
			begin
				state_next = idle;
				if (verdad_reg == 1'd0)
					verdad = 1'd1;
					verdad_next = 1'd0;
			end
			// salidas
		endcase
	end
	//assign dout = b_reg[8:0];  //// Aqui se asignan a la salida los 8 datos que se necesitan del teclado
	

always @(posedge clk)    /////Aquí se inicializan los estados y se actualizan las variables
	salida_reg <= salida_next;

always @*
begin
	salida_next = salida_reg;
	if (verdad == 1'd1)
	case(b_reg[8:1])

		8'h33: // H
			salida_next = 6'b000001;
		
		8'h16: // 1
			salida_next = 6'b000010;
			
		8'h1E: // 2
			salida_next = 6'b000100;
				
		8'h26: // 3
			salida_next = 6'b001000;
				
		8'h2D: // R
			salida_next = 6'b010000;
				
		8'h43: // I
			salida_next = 6'b100000;
			
		8'h5A: 
			salida_next = 6'b000000;
		
	endcase	
end

always @*
begin
	led = b_reg[0];
	salida = salida_reg;
end

endmodule


